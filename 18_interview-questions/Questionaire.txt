Go Programming Language 
	- created by Robert Greiesemer, Rob Pike, Ken Thompson 
	- created in 2007 
	- Go compiler was initially written in C, but now written in Go itself.

	- System-Level programming language, for large distributed systems ans highly scalable network servers.

Features 
	- Efficient concurrency 
	- Flexible approach to data abstraction 
	- Supports automatic memory management, i.e., garbage collection
	
Go-Routines
	- In java, it takes 1MB of memory heap size approximately, for creating a new thread.
	- go routines consume around ~ 2KB heap memory.
	- go routines have faster startup time and they use more meory on a need basis only.
	- Also, single goroutine can run on multiple threads since goroutines and OS threads dont have 1:1 mapping
	
	
	1. What is Golang and what are its benefits?
2. How can we print the type of a variable in Golang?
3. What are Goroutines? Explain the benefits of using them.
4. What is the static type declaration of a variable in Golang?
5. What are typed constants and untyped constants?
6. What is the difference between = and := operator?
7. What is a string literal in Golang?
8. What are packages in Golang?
9. What is the default value of a local variable in Golang?
10. What is the static type variable declaration in Golang?
11. How do we find the length of a string in Golang?
12. What is the string data type in Golang? Can you change a specific
character in a string?


1. Write the syntax for creating a function in Golang.
2. What is the difference between multiple returns and named returns?
Explain with a Go program.
3. Write a Go program to explain call by value in Golang.
4. What are variadic functions? Explain scenarios where it can be used.
5. What is the defer statement in Golang?

conditions
-----------
1. Write a Go program to explain the use of if..else statement.
2. State true or false:
a. The for loop is not available in Golang.
b. Go doesn’t have while or do…while loops.
c. The for loop is available in Golang.
3. Write the syntax of if…else if…else statement.
4. What is the switch…case statement? Write a Go program to explain the
use of the switch…case statement.
5. What is the role of the goto statement in the Go program? Explain with
a Go program.
6. How many types of loop control statements does Go support? Write a
Go program to explain it.
7. State true or false:
	a. The goto statement is used to transfer control to the labeled
	statement in the Go program.
	b. The continue statement is not used to skip over the execution part
	of the loop on a certain condition.
	c. In Go, a for loop can work as an infinite loop if you omit the loop
	condition or use a true.
8. Write the syntax for nested for loops in Golang.

arrays
-------
1. How can we check whether or not an array is empty in Golang?
2. Write a Go program to find the length of an array.
3. Write a Go program to set the value at an array index and access it.
4. Explain the role of array in Golang. Write a Go program to iterate over
an array.
5. How can we pass arrays to functions in Golang? Explain using a Go
program.

slices
------
1. How can we create a slice using slice literal? Explain using a Go
program.
2. Write a Go program to create a slice from an array.
3. How can we create a slice from another slice? Explain using a Go
program.
4. Write a Go program to create a slice using the make() function.
5. Write a Go program to modify a slice.
6. How can we compare two slices in Golang? Write a Go program.
7. Write a Go program to create and access the multi-dimensional slice.
8. Write a Go program to sort a slice using the sort package.
9. How can we iterate over slice? Explain using a Go program.
10. Explain different ways to iterate over the slice in Golang.


Map
----
1. What are Golang maps? Write a Go program to initialize a map using
map literal.
2. Explain the initialization of maps using the make() function in Golang.
3. Write a Go program to explain iteration over maps.
4. How can we add key-value pairs in a Golang map? Explain using a Go
program.
5. Write a Go program to update key-value pairs in a Golang map.
6. How can we retrieve the value of a key in the map? Explain with the
help of a Go program.
7. How can we check if a key exists in a Golang map? Write a Go
program to explain it.
8. Write a Go program to explain key deletion from maps.


struct 
-------
1. Write a Go program to declare and initialize a struct.
2. What is the zero value of a atruct? Write a Go program to explain the
zero value of a struct.
3. Write a Go program to access the fields of a given struct.
4. How can we use a pointer to a struct? Write a Go program to explain
the concept of pointer in struct.
5. Write a Go program to update the values of struct members using the
pointer.
6. Explain how structs are value types using a Go program.
7. Write a Go program to check if two structs are equal.


Methods
======
1. What is the output of the following code?
	package main
	import "fmt"
	type person struct {
		id int
		name string
	}
	func (p person) setName(name string) {
		p.name = name
	}
	func main() {
		p := person{101, "Xyz"}
		p.setName("Abc")
		fmt.Println(p)
	}
	
2. State true or false:
	a. We can create an overloaded method in Golang
	b. The pointer receiver method can only be called on the address of
	the type on which the method is declared.
	c. We can create a method without specifying a receiver variable. The
	receiver type is enough to declare a method.
	d. It is not necessary to declare a method of a type in the same file
	where the type is declared.
3. Write a program to define the following custom types of int: Distance,
Millimeter, Centimeter, Meter, Kilometer. You need to add methods on
each type to convert and return the values of other types. For example,
you can define methods on Millimeter to convert its value to Centimeter,
Meter, and Kilometer.
4. Consider the program from question 1. What will be the output if we call
the setName() method on the address of the person type?
5. Find the problem in the following program:
	package main
	import "fmt"
	type A struct {
	}
	func (a A) m1() {
		fmt.Println("M1 of A")
	}
	type B struct {
		A
	}
	func (b B) m1(a int) {
		fmt.Println("M1 of B")
	}
	func main() {
		b := B{}
		b.m1()
	}
	
Interfaces 
-----------
1. What will be the result of the following program?
	package main
	import "fmt"
	type I interface {
		m1()
	}
	type T struct {
	}
	func (t *T) m1() {
		fmt.Println("M1 of T")
	}
	func main() {
		var i I
		t := T{}
		i = t
		i.m1()
	}
	a. M1 of T
	b. Compilation error
2. What will be the result of the following program?
	package main
	import "fmt"
	type I interface {
	m1()
	}
	type T struct {
	}
	func (t *T) m1() {
	fmt.Println("M1 of T")
	}
	func (t *T) m2() {
	fmt.Println("M2 of T")
	}
	func main() {
	var i I
	t := T{}
	i = &t
	i.m2()
	}
	a. M2 of T
	b. M1 of T
	c. Compilation error
3. What is the stringer interface?
	a. It converts every object into a string.
	b. It is an empty interface and every type by default implements this.
	c. It has a method named String(). When you implement the String
	method on any type, we can customize the output of the type.
	d. There is no such interface in Golang.
4. Which is the name of the interface which can be used for sorting?
	a. Sorter
	b. SortInterface
	c. Comparator
	d. Interface
5. Select true statements from the followings.
	a. The implements key can be used to implement an interface.
	b. A type can implement more than one interface.
	c. An interface can be implemented by many types.
	d. There is no syntax to implement an interface
	e. To implement an interface in any type, the type needs to implement
	all the methods of the interface.
	
Pointers
---------
1. What will be the output of the following program?
	package main
	import "fmt"
	type person struct {
		id int
		name string
	}
	func main() {
		p1 := &person{101, "XYX"}
		modify(p1)
		fmt.Println("Person p1:", *p1)
	}
	func modify(p1 *person) {
		p1 = &person{202, "ABC"}
	}
	a. Person p1: {101 XYX}
	b. Person p1: {202 ABC}
2. What will be the result in the following program?
	package main
	import "fmt"
	func main() {
		var a *int
		b := 10.3
		a = &b
		fmt.Println(*a)
	}
	a. The program will panic with nil pointer dereferencing error.
	b. It will print 10.3.
	c. There will be a compilation error because we cannot assign the
	address of the float variable to the int type pointer variable.
3. Point out the error in the following program:
	package main
	import "fmt"
	func main() {
	var a *int
	fmt.Println(*a)
	}
4. Which of the following statements will return true?
	a. var a *int
	fmt.Println(a == nil)
	b. var a *int
	var b *int
	fmt.Println(a == b)
	c. a := 10
	b := 10
	x := &a
	y := &b
	fmt.Println(x == y)
5. What will be the output of the following program?
	package main
	import "fmt"
	func main() {
	a := 10
	b := &a
	fmt.Println(a == b)
	}
	a. true
	b. false
	c. Compilation error
	
Error Handling 
---------------
1. Which of the following is the constructor method to create a new error object?
	a. New()
	b. NewErr()
	c. NewError()
	d. Err()
2. Modify the following code so this program will finish gracefully by
	print error. Note: Don’t modify the array index.
	package main
	import "fmt"
	func main() {
		arr := [5]int{10, 20, 30, 40, 50}
		index := 5
		fmt.Println(arr[index])
	}
3. Which method do we need to define to create a custom error type?
	a. Error()
	b. Errors()
	c. Err()
	d. NewErr()
4. Which of the following statements is true about defer?
	a. Defer function executes when the whole call stack is finished
	b. Defer function executes at the end of the parent function. When the
	parent function finishes its execution, only then the defer function
	executes.
	c. Defer function executes at the start of the parent function.
	d. Defer function only runs when there is an error in the parent
	function.
5. Is it necessary to call the recover function in the defer function?
	a. Yes
	b. No
	
concurrency
------------
1. Write a producer-consumer program where there are two producer
goroutines that produce data int at different intervals. One goroutine
will produce data every 300 milliseconds and another goroutine will
produce data every 400 milliseconds. There will be one consumer
goroutine that will consume the data. Please note that producers should
produce data 100 times only.
2. Find an error in the following program:
	package main
	import (
		"fmt"
		"sync"
	)
	func main() {
		wg := sync.WaitGroup{}
		wg.Add(2)
		go func() {
			fmt.Println("Running go routine")
			wg.Done()
		}()
		wg.Wait()
	}
3. What is the difference between buffered and unbuffered channels?
4. Which of the following code defines a real-only channel as a function argument?
	a. func read(ch <-chan int) {
	ch <- 10
	}
	b. func read(ch chan<- int) {
	ch <- 10
	}
	c. func read(ch chan int) {
	ch <- 10
	}
	d. func read(<-ch chan int) {
	ch <- 10
	}
5. What will happen when data is sent to an unbuffered channel but there is
no goroutine to read that data?
	a. The program will be stuck for an infinite time.
	b. The program will panic because it is a deadlock.
	c. The program will end whether or not there is a listener.
