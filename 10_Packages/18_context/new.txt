ctx, cancelfunc := context.WithTimeout(context.Background(), 5*time.Second)
defer cancelfunc()
res, err := db.ExecContext(ctx, "CREATE DATABASE IF NOT EXISTS "+dbname)
if err != nil {
    log.Printf("Error %s when creating DB\n", err)
    return nil, err
}
no, err := res.RowsAffected()
if err != nil {
    log.Printf("Error %s when fetching rows", err)
    return nil, err
}
log.Printf("rows affected %d\n", no)

db.Close()
db, err = sql.Open("mysql", dsn(dbname))
if err != nil {
    log.Printf("Error %s when opening DB", err)
    return nil, err
}
//defer db.Close()

db.SetMaxOpenConns(20)
db.SetMaxIdleConns(20)
db.SetConnMaxLifetime(time.Minute * 5)

ctx, cancelfunc = context.WithTimeout(context.Background(), 5*time.Second)
defer cancelfunc()
err = db.PingContext(ctx)
if err != nil {
    log.Printf("Errors %s pinging DB", err)
    return nil, err
}
log.Printf("Connected to DB %s successfully\n", dbname)
return db, nil